// src/lib/api.js
const BASE = "http://localhost:3000";

async function http(path, options = {}) {
  const res = await fetch(`${BASE}${path}`, {
    headers: { "Content-Type": "application/json" },
    ...options,
  });
  let data = null;
  try { data = await res.json(); } catch {}
  if (!res.ok) {
    const msg = (data && (data.message || data.error)) || `${res.status} ${res.statusText}`;
    throw new Error(msg);
  }
  return data ?? {};
}

export const api = {
  // base
  getPacks:   () => http("/packs"),
  getUser:    (id) => http(`/users/${id}`),
  getHistory: () => http("/history"),

  purchase:   ({ userId, packId, idempotencyKey }) =>
    http("/purchase", {
      method: "POST",
      body: JSON.stringify({ userId, packId, idempotencyKey }),
    }),

  transfer:   ({ fromId, toId, amount }) =>
    http("/transfer", {
      method: "POST",
      body: JSON.stringify({ fromId, toId, amount }),
    }),

  redeem:     ({ userId, mode, amountPlumes, idempotencyKey }) =>
    http("/redeem", {
      method: "POST",
      body: JSON.stringify({ userId, mode, amountPlumes, idempotencyKey }),
    }),

  // auteur
  getAuthor:  (id) => http(`/authors/${id}`),

  // plumonomie
  getProject: (id) => http(`/projects/${id}`),
  superPlume: ({ projectId, fromUserId, quantity = 1, idempotencyKey }) =>
    http("/supports/super-plume", {
      method: "POST",
      body: JSON.stringify({ projectId, fromUserId, quantity, idempotencyKey }),
    }),
  shareProject: (id) => http(`/projects/${id}/share`, { method: "POST" }),
};
// src/lib/api.js
const BASE = "http://localhost:3000";

async function http(path, options = {}) {
  const res = await fetch(`${BASE}${path}`, {
    headers: { "Content-Type": "application/json" },
    ...options,
  });
  let data = null;
  try { data = await res.json(); } catch {}
  if (!res.ok) {
    const msg = (data && (data.message || data.error)) || `${res.status} ${res.statusText}`;
    throw new Error(msg);
  }
  return data;
}

export const api = {
  // --- existant ---
  getPacks:   () => http("/packs"),
  getUser:    (id) => http(`/users/${id}`),
  getHistory: () => http("/history"),
  purchase:   ({ userId, packId, idempotencyKey }) =>
    http("/purchase", {
      method: "POST",
      body: JSON.stringify({ userId, packId, idempotencyKey }),
    }),
  transfer:   ({ fromId, toId, amount }) =>
    http("/transfer", {
      method: "POST",
      body: JSON.stringify({ fromId, toId, amount }),
    }),
  redeem:     ({ userId, mode, amountPlumes, idempotencyKey }) =>
    http("/redeem", {
      method: "POST",
      body: JSON.stringify({ userId, mode, amountPlumes, idempotencyKey }),
    }),

  // --- NOUVEAU : plumonomie ---
  getProject: (id) => http(`/projects/${id}`),
  superPlume: ({ projectId, fromUserId, quantity = 1, idempotencyKey }) =>
    http("/supports/super-plume", {
      method: "POST",
      body: JSON.stringify({ projectId, fromUserId, quantity, idempotencyKey }),
    }),
  shareProject: (id) => http(`/projects/${id}/share`, { method: "POST" }),
  recalcAwards: (id) => http(`/projects/${id}/recalculate-awards`, { method: "POST" }),
};


